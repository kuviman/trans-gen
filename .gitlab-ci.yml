stages:
  - build
  - test
  - deploy

build:
  stage: build
  image: rust
  script:
    - cargo test --release -p trans-derive -p trans -p trans-gen
    - cargo build --release --bin test-runner
    - mkdir bin && cp target/release/test-runner bin/
  artifacts:
    paths:
      - bin
    expire_in: 1 day

"C++":
  stage: test
  image: gcc
  before_script:
    - apt-get update && apt-get install -y cmake
  script:
    - mkdir -p benchmarks/docker/cpp
    - ./bin/test-runner --language=C++ --verbose --repeat=1000 --save-results=benchmarks/docker/cpp/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day
"C#":
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:5.0
  script:
    - mkdir -p benchmarks/docker/csharp
    - ./bin/test-runner --language=C# --verbose --repeat=1000 --save-results=benchmarks/docker/csharp/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day
"F#":
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:5.0
  script:
    - mkdir -p benchmarks/docker/fsharp
    - ./bin/test-runner --language=F# --verbose --repeat=1000 --save-results=benchmarks/docker/fsharp/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day
"D":
  stage: test
  image: dlanguage/dmd
  script:
    - mkdir -p benchmarks/docker/dlang
    - ./bin/test-runner --language=D --verbose --repeat=1000 --save-results=benchmarks/docker/dlang/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day
"Go":
  stage: test
  image: golang
  script:
    - mkdir -p benchmarks/docker/go
    - ./bin/test-runner --language=Go --verbose --repeat=1000 --save-results=benchmarks/docker/go/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day
"Java":
  stage: test
  image: maven
  script:
    - mkdir -p benchmarks/docker/java
    - ./bin/test-runner --language=Java --verbose --repeat=1000 --save-results=benchmarks/docker/java/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day
"Kotlin":
  stage: test
  image: maven
  script:
    - mkdir -p benchmarks/docker/kotlin
    - ./bin/test-runner --language=Kotlin --verbose --repeat=1000 --save-results=benchmarks/docker/kotlin/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day
"Scala":
  stage: test
  image: maven
  script:
    - mkdir -p benchmarks/docker/scala
    - ./bin/test-runner --language=Scala --verbose --repeat=1000 --save-results=benchmarks/docker/scala/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day
"JavaScript":
  stage: test
  image: node
  script:
    - mkdir -p benchmarks/docker/javascript
    - ./bin/test-runner --language=JavaScript --verbose --repeat=1000 --save-results=benchmarks/docker/javascript/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day
"TypeScript":
  stage: test
  image: node
  script:
    - mkdir -p benchmarks/docker/typescript
    - ./bin/test-runner --language=TypeScript --verbose --repeat=1000 --save-results=benchmarks/docker/typescript/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day
"Python":
  stage: test
  image: python
  script:
    - mkdir -p benchmarks/docker/python
    - ./bin/test-runner --language=Python --verbose --repeat=1000 --save-results=benchmarks/docker/python/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day
"Ruby":
  stage: test
  image: ruby
  script:
    - mkdir -p benchmarks/docker/ruby
    - ./bin/test-runner --language=Ruby --verbose --repeat=1000 --save-results=benchmarks/docker/ruby/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day
"Rust":
  stage: test
  image: rust
  script:
    - mkdir -p benchmarks/docker/rust
    - ./bin/test-runner --language=Rust --verbose --repeat=1000 --save-results=benchmarks/docker/rust/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day
"PHP":
  stage: test
  image: php
  before_script:
    - docker-php-ext-install sockets
  script:
    - mkdir -p benchmarks/docker/php
    - ./bin/test-runner --language=PHP --verbose --repeat=1000 --save-results=benchmarks/docker/php/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day
"Haskell":
  stage: test
  image: fpco/stack-build-small
  script:
    - mkdir -p benchmarks/docker/haskell
    - ./bin/test-runner --language=Haskell --verbose --repeat=1000 --save-results=benchmarks/docker/haskell/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day
"Swift":
  stage: test
  image: swift
  script:
    - mkdir -p benchmarks/docker/swift
    - ./bin/test-runner --language=Swift --verbose --repeat=1000 --save-results=benchmarks/docker/swift/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day
"Pascal":
  stage: test
  image: kuviman/docker-lazarus
  script:
    - mkdir -p benchmarks/docker/pascal
    - ./bin/test-runner --language=Pascal --verbose --repeat=1000 --save-results=benchmarks/docker/pascal/results.json
  artifacts:
    paths:
      - benchmarks
    expire_in: 1 day

"Push testing branch":
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  stage: deploy
  image: rust
  before_script:
    - git config --global user.name 'CI'
    - git config --global user.email '<>'
  script:
    - git fetch origin testing
    - git worktree add -b testing testing origin/testing
    - rm -rf testing/generated-code
    - ./bin/test-runner --generate=testing/generated-code
    - |
      for OS in docker; do
        BENCHMARKS=(benchmarks/$OS/*/results.json)
        ./bin/test-runner ${BENCHMARKS[@]/#/--load-results=} --save-results testing/benchmarks-$OS.md
      done
    - pushd testing
    - git add .
    - git diff --cached --exit-code || git commit -m "Update (job $CI_JOB_ID for $CI_COMMIT_SHORT_SHA)"
    - git push "https://ci:${CI_PUSH_TOKEN}@${CI_REPOSITORY_URL#*@}" testing
    - popd
    - mkdir -p .artifacts/clients
