package {{ self.package(schema) }}

import {{ &self.main_package }}.util.StreamUtil

{{ doc_comment(documentation, &[]) }}
sealed abstract class {{ base_name.camel_case(conv) }} (val tag: Int) {
    {{ doc_write_to(&base_name.camel_case(conv)) }}
    def writeTo(stream: java.io.OutputStream): scala.Unit = {
        StreamUtil.writeInt(stream, tag)
    }
}

object {{ base_name.camel_case(conv) }} {
    - for (tag, variant) in variants.iter().enumerate() {
    {{ doc_comment(&variant.documentation, &[]) }}
    case object {{ variant.name.shouty_snake_case(conv) }} extends {{ base_name.camel_case(conv) }}({{ tag }})
    - }

    {{ doc_read_from(&base_name.camel_case(conv)) }}
    def readFrom(stream: java.io.InputStream): {{ base_name.camel_case(conv) }} =
        StreamUtil.readInt(stream) match {
            - for (tag, variant) in variants.iter().enumerate() {
            case {{ variant.name.shouty_snake_case(conv) }}.tag => {{ variant.name.shouty_snake_case(conv) }}
            - }
            case _ => throw new java.io.IOException("Unexpected tag value")
        }
}