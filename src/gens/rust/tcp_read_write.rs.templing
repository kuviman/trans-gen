use anyhow::Context;

use {{ self.crate_code_name() }}::*;

fn main() -> anyhow::Result<()> {
    let mut args = std::env::args();
    args.next().unwrap();
    let host = args.next().context("Provide host as first arg")?;
    let port: u16 = args
        .next()
        .context("Provide port as second arg")?
        .parse()
        .context("Failed to parse port")?;
    let stdout: bool = args.next().unwrap().parse().unwrap();

    let stream = std::net::TcpStream::connect((host, port)).context("Failed to connect")?;
    stream.set_nodelay(true)?;
    let mut input_stream = std::io::BufReader::new(stream.try_clone()?);
    let mut output_stream = std::io::BufWriter::new(stream.try_clone()?);

    while trans::Trans::read_from(&mut input_stream)? {
        let input: {{ type_name(schema) }} =
            trans::Trans::read_from(&mut input_stream).context("Failed to read input")?;
        if stdout {
            println!("{:?}", input);
        }
        trans::Trans::write_to(&input, &mut output_stream).context("Failed to write output")?;
        std::io::Write::flush(&mut output_stream)?;
    }

    Ok(())
}
