- let full_name = if let Some((base_name, _)) = base.filter(|_| self.options.cxx_standard < 17) {
-     format!(
-         "{}::{}",
-         base_name.camel_case(conv),
-         definition.name.camel_case(conv),
-     )
- } else {
-     definition.name.camel_case(conv)
- };
- let full_name = &full_name;
{{ full_name }}::{{ definition.name.camel_case(conv) }}(~
    - for (index, field) in definition.fields.iter().enumerate() {
        - if index != 0 {
            ~, ~
        - }
        ~{{ self.type_name(&field.schema) }} {{ field.name.mixed_case(conv) }}~
    - }
- if definition.fields.is_empty() {
    ~) { }
- } else {
    ~) : ~
        - for (index, field) in definition.fields.iter().enumerate() {
            - if index != 0 {
                ~, ~
            - }
            ~{{ field.name.mixed_case(conv) }}({{ field.name.mixed_case(conv) }})~
        - }
    ~ { }
- }

{{ self.doc_read_from(&definition.name.camel_case(conv)) }}
{{ full_name }} {{ full_name }}::readFrom(InputStream& stream) {
    - for field in &definition.fields {
    {{ self.read_var(&field.name.mixed_case(conv), &field.schema, true) }}
    - }
    return {{ full_name }}(~ 
        - for (index, field) in definition.fields.iter().enumerate() {
            - if index != 0 {
                ~, ~
            - }
            ~{{ field.name.mixed_case(conv) }}~
        - }
    ~);
}

{{ self.doc_write_to(&definition.name.camel_case(conv)) }}
void {{ full_name }}::writeTo(OutputStream& stream) const {
    - if base.is_some() && self.options.cxx_standard < 17 {
    stream.write(TAG);
    - }
    - for field in &definition.fields {
    {{ self.write_var(&field.name.mixed_case(conv), &field.schema) }}
    - }
}

{{ self.doc_to_string(&definition.name.camel_case(conv)) }}
std::string {{ full_name }}::toString() const {
    std::stringstream ss;
    ss << "{{ full_name }} { ";
    - for (index, field) in definition.fields.iter().enumerate() {
    - if index != 0 {
    ss << ", ";
    - }
    ss << "{{ field.name.mixed_case(conv) }}: ";
    {{ self.var_to_string(&field.name.mixed_case(conv), &field.schema) }}
    - }
    ss << " }";
    return ss.str();
}
- if definition.hashable() {

bool {{ full_name }}::operator ==(const {{ full_name }}& other) const {
    return ~
    - for (index, field) in definition.fields.iter().enumerate() {
        - if index != 0 {
            ~ && ~
        - }
        ~{{ field.name.mixed_case(conv) }} == other.{{ field.name.mixed_case(conv) }}~
    - }
    - if definition.fields.is_empty() {
        ~true~
    - }
    ~;
}
- }