- let var_decl = if decl_var { format!("{} {}", self.type_name(schema), var) } else { var.to_owned() }; let var_decl = &var_decl;
- match schema {
- Schema::Bool => {
{{ var_decl }} = stream.readBool();
- }
- Schema::Int32 => {
{{ var_decl }} = stream.readInt();
- }
- Schema::Int64 => {
{{ var_decl }} = stream.readLongLong();
- }
- Schema::Float32 => {
{{ var_decl }} = stream.readFloat();
- }
- Schema::Float64 => {
{{ var_decl }} = stream.readDouble();
- }
- Schema::String => {
{{ var_decl }} = stream.readString();
- }
- Schema::Struct { .. } => {
{{ var_decl }} = {{ name_path(schema) }}::readFrom(stream);
- }
- Schema::Option(inner) => {
- if self.options.cxx_standard >= 17 {
{{ var_decl }} = std::optional<{{ self.type_name(inner) }}>();
- } else {
{{ var_decl }} = std::shared_ptr<{{ self.type_name(inner) }}>();
- }
if (stream.readBool()) {
    - let value_var = format!("{}Value", var); let value_var = &value_var;
    - if self.options.cxx_standard >= 17 {
    {{ self.read_var(value_var, inner, true) }}
    {{ var }}.emplace({{ value_var }});
    - } else {
    {{ self.read_var(value_var, inner, true) }}
    {{ var }}.reset(new {{ self.type_name(inner) }}({{ value_var }}));
    - }
}
- }
- Schema::Vec(inner) => {
{{ var_decl }} = std::vector<{{ self.type_name(inner) }}>();
- let size_var = format!("{}Size", var); let size_var = &size_var;
size_t {{ size_var }} = stream.readInt();
{{ var }}.reserve({{ size_var }});
- let index_var = format!("{}Index", var); let index_var = &index_var;
for (size_t {{ index_var }} = 0; {{ index_var }} < {{ size_var }}; {{ index_var }}++) {
    - let element_var = format!("{}Element", var); let element_var = &element_var;
    {{ self.read_var(element_var, inner, true) }}
    {{ var }}.emplace_back({{ element_var }});
}
- }
- Schema::Map(key_type, value_type) => {
- let size_var = format!("{}Size", var); let size_var = &size_var;
size_t {{ size_var }} = stream.readInt();
{{ var_decl }} = std::unordered_map<{{ self.type_name(key_type) }}, {{ self.type_name(value_type) }}>();
{{ var }}.reserve({{ size_var }});
- let index_var = format!("{}Index", var); let index_var = &index_var;
for (size_t {{ index_var }} = 0; {{ index_var }} < {{ size_var }}; {{ index_var }}++) {
    - let key_var = format!("{}Key", var); let key_var = &key_var;
    - let value_var = format!("{}Value", var); let value_var = &value_var;
    {{ self.read_var(key_var, key_type, true) }}
    {{ self.read_var(value_var, value_type, true) }}
    {{ var }}.emplace(std::make_pair({{ key_var }}, {{ value_var }}));
}
- }
- Schema::Enum { base_name, variants, .. } => {
{{ var_decl }} = read{{ base_name.camel_case(conv) }}(stream);
- }
- Schema::OneOf { base_name, namespace, .. } => {
- if self.options.cxx_standard >= 17 {
- let namespace_path = namespace_path(namespace).map_or(String::new(), |path| path + "::");
{{ var_decl }} = {{ namespace_path }}read{{ base_name.camel_case(conv) }}(stream);
- } else {
{{ var_decl }} = {{ name_path(schema) }}::readFrom(stream);
- }
- }
- }