- match schema {
- Schema::Bool | Schema::Int32 | Schema::Int64 | Schema::Float32 | Schema::Float64 | Schema::String => {
stream.write({{ var }});
- }
- Schema::Struct { .. } => {
{{ var }}.writeTo(stream);
- }
- Schema::Option(inner) => {
if ({{ var }}) {
    stream.write(true);
    - let value_var = format!("{}Value", var); let value_var = &value_var;
    const {{ self.type_name(inner) }}& {{ value_var }} = *{{ var }};
    {{ self.write_var(value_var, inner) }}
} else {
    stream.write(false);
}
- }
- Schema::Vec(inner) => {
stream.write((int)({{ var }}.size()));
- let element_var = format!("{}Element", var); let element_var = &element_var;
for (const {{ self.type_name(inner) }}& {{ element_var }} : {{ var }}) {
    {{ self.write_var(element_var, inner) }}
}
- }
- Schema::Map(key_type, value_type) => {
stream.write((int)({{ var }}.size()));
- let entry_var = format!("{}Entry", var); let entry_var = &entry_var;
for (const auto& {{ entry_var }} : {{ var }}) {
    - let key_var = format!("{}Key", var); let key_var = &key_var;
    - let value_var = format!("{}Value", var); let value_var = &value_var;
    const {{ self.type_name(key_type) }}& {{ key_var }} = {{ entry_var }}.first;
    const {{ self.type_name(value_type) }}& {{ value_var }} = {{ entry_var }}.second;
    {{ self.write_var(key_var, key_type) }}
    {{ self.write_var(value_var, value_type) }}
}
- }
- Schema::Enum { .. } => {
stream.write((int)({{ var }}));
- }
- Schema::OneOf { base_name, .. } => {
- if self.options.cxx_standard >= 17 {
write{{ base_name.camel_case(conv) }}({{ var }}, stream);
- } else {
{{ var }}->writeTo(stream);
- }
- }
- }