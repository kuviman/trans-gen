#ifndef __MODEL_{{ base_name.shouty_snake_case(conv) }}_HPP__
#define __MODEL_{{ base_name.shouty_snake_case(conv) }}_HPP__

{{ self.includes(schema) }}

- if let Some(path) = namespace_path(namespace) {
namespace {{ path }} {

- }
- if self.options.cxx_standard >= 17 {
- for (tag, variant) in variants.iter().enumerate() {

{{ self.struct_def(variant, Some((base_name, tag))) }}
- }

{{ self.doc_comment(documentation) }}
typedef std::variant<~
    - for (index, variant) in variants.iter().enumerate() {
    ~{{ variant.name.camel_case(conv) }}~
    - if index + 1 < variants.len() {
        ~, ~
    - }
    - }
~> {{ base_name.camel_case(conv) }};

{{ self.doc_read_from(&base_name.camel_case(conv)) }}
{{ base_name.camel_case(conv) }} read{{ base_name.camel_case(conv) }}(InputStream& stream);

{{ self.doc_write_to(&base_name.camel_case(conv)) }}
void write{{ base_name.camel_case(conv) }}(const {{ base_name.camel_case(conv) }}& value, OutputStream& stream);

{{ self.doc_to_string(&base_name.camel_case(conv)) }}
std::string {{ base_name.mixed_case(conv) }}ToString(const {{ base_name.camel_case(conv) }}& value);
- } else {
{{ self.doc_comment(documentation) }}
class {{ base_name.camel_case(conv) }} {
public:
    - for variant in variants {
    {{ self.doc_comment(&variant.documentation) }}
    class {{ variant.name.camel_case(conv) }};
    - }

    {{ self.doc_read_from(&base_name.camel_case(conv)) }}
    static std::shared_ptr<{{ base_name.camel_case(conv) }}> readFrom(InputStream& stream);

    {{ self.doc_write_to(&base_name.camel_case(conv)) }}
    virtual void writeTo(OutputStream& stream) const = 0;

    {{ self.doc_to_string(&base_name.camel_case(conv)) }}
    virtual std::string toString() const = 0;
};
- for (tag, variant) in variants.iter().enumerate() {

{{ self.struct_def(variant, Some((base_name, tag))) }}
- }
- }

- if namespace_path(namespace).is_some() {
}

- }
#endif