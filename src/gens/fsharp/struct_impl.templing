- let struct_name = if let Some((base_name, _)) = base {
-   format!("{}{}", base_name.camel_case(conv), definition.name.camel_case(conv))
- } else {
-   definition.name.camel_case(conv)
- }; let struct_name = &struct_name;
{{ doc_comment(&definition.documentation) }}
- if definition.fields.is_empty() {
type {{ struct_name }} = struct end with
- } else {
type {{ struct_name }} = {
    - for field in &definition.fields {
    {{ doc_comment(&field.documentation) }}
    {{ field.name.camel_case(conv) }}: {{ type_name(&field.schema) }};
    - }
} with
- }

    {{ doc_write_to(&definition.name.camel_case(conv)) }}
    member this.writeTo(writer: System.IO.BinaryWriter) =
        - if let Some((_, tag)) = base {
        writer.Write {{ tag }}
        - }
        - for field in &definition.fields {
        {{ write_var(&format!("this.{}", field.name.camel_case(conv)), &field.schema) }}
        - }
        ()

    {{ doc_read_from(&definition.name.camel_case(conv)) }}
    - if definition.fields.is_empty() {
    static member readFrom(reader: System.IO.BinaryReader) = new {{ struct_name }}()
    - } else {
    static member readFrom(reader: System.IO.BinaryReader) = {
        - for field in &definition.fields {
        {{ field.name.camel_case(conv) }} = {{ read_var(&field.schema) }}
        - }
    }
    - }