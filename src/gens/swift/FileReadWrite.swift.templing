#if os(Linux)
    import Glibc
#else
    import Darwin
#endif

class FileInputStream : InputStream {
    init(_ path: String) {
        file = fopen(path, "rb")
    }

    func readBytesAtMost(_ byteCount: Int) -> [Byte] {
        var buffer = [Byte](repeating: 0x0, count: byteCount)
        fread(&buffer, 1, byteCount, file)
        return buffer
    }

    deinit {
        fclose(file)
    }

    private let file: UnsafeMutablePointer<FILE>
}

class FileOutputStream : OutputStream {
    init(_ path: String) {
        file = fopen(path, "wb")
    }

    func writeBytes(_ data: [Byte]) {
        fwrite(data, 1, data.count, file)
    }

    func flush() {
        fflush(file)
    }

    deinit {
        fclose(file)
    }

    private let file: UnsafeMutablePointer<FILE>
}

let inputFile = CommandLine.arguments[1]
let outputFile = CommandLine.arguments[2]
let repeatTimes = Int(CommandLine.arguments[3])!

for _ in 1...repeatTimes {
    let inputStream = BufferedInputStream(FileInputStream(inputFile))
    let input = {{ type_name(schema) }}.readFrom(inputStream)
    if repeatTimes == 1 {
        print(input)
    }
    let outputStream = BufferedOutputStream(FileOutputStream(outputFile))
    input.writeTo(outputStream)
    outputStream.flush()
}