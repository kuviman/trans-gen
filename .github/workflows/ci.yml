on: [push, pull_request]

name: Continuous integration

jobs:
  build-test:
    name: Build and run package tests (${{ matrix.env.name }})
    strategy:
      fail-fast: false
      matrix:
        env:
          - name: Linux
            short: linux
            runs-on: ubuntu-latest
          - name: MacOS
            short: macos
            runs-on: macos-latest
          - name: Windows
            short: windows
            runs-on: windows-latest
    runs-on: ${{ matrix.env.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release -p trans-derive -p trans -p trans-gen

      - name: Build testing binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --example testing

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: testing-${{ matrix.env.short }}
          path: target/release/examples/testing${{ fromJson('["", ".exe"]')[matrix.env.name == 'Windows'] }}

  test:
    name: ${{ matrix.language.name }} ${{ matrix.env.name }}
    needs: build-test
    strategy:
      fail-fast: false
      matrix:
        language:
          - name: C++
            short: cpp
          - name: C#
            short: csharp
          - name: D
            short: dlang
          - name: F#
            short: fsharp
          - name: Go
            short: go
          - name: Java
            short: java
          - name: JavaScript
            short: javascript
          - name: Kotlin
            short: kotlin
          # - name: Markdown
          #   short: markdown
          - name: Python
            short: python
          - name: Ruby
            short: ruby
          - name: Rust
            short: rust
          - name: Scala
            short: scala
          - name: TypeScript
            short: typescript
          - name: Swift
            short: swift
          - name: PHP
            short: php
          - name: Haskell
            short: haskell
        env:
          - name: Linux
            short: linux
            runs-on: ubuntu-latest
            executable: ./testing
          - name: MacOS
            short: macos
            runs-on: macos-latest
            executable: ./testing
          - name: Windows
            short: windows
            runs-on: windows-latest
            executable: .\testing.exe
        exclude:
          - language:
              name: Swift
              short: swift
            env:
              name: Windows
              short: windows
              runs-on: windows-latest
              executable: .\testing.exe
    runs-on: ${{ matrix.env.runs-on }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: testing-${{ matrix.env.short }}

      - name: Prepare testing binary
        run: chmod +x testing

      - if: matrix.language.name == 'D'
        name: Setup D
        uses: dlang-community/setup-dlang@v1

      - if: matrix.language.name == 'Java'
        name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: "15"

      - if: matrix.language.name == 'PHP'
        name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          extensions: sockets

      - name: Run tests
        run: ${{ matrix.env.executable }} --language=${{ matrix.language.name }} --verbose --repeat=1000 --save-results=results.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: benchmarks-${{ matrix.env.short }}-${{ matrix.language.short }}
          path: results.json

  update-testing-branch:
    name: Update testing branch
    needs:
      - build-test
      - test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Update testing branch
        run: |
          git config --global user.name 'CI'
          git config --global user.email '<>'
          git fetch origin testing
          git worktree add testing-branch testing
          mv testing-linux/testing ./
          chmod +x testing
          ./testing --generate=testing-branch/generated-code
          for OS in windows linux macos; do
            BENCHMARKS=(benchmarks-$OS-*/results.json)
            ./testing ${BENCHMARKS[@]/#/--load-results=} --save-results testing-branch/benchmarks-$OS.md
          done
          pushd testing-branch
          git add .
          git diff --cached --exit-code || git commit -m "Update generated code (run ${{ github.run_id }})"
          popd
          rm -rf branch
          git worktree prune
          git push origin testing
